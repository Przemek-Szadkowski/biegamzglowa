{"version":3,"sources":["components/DayInputs.js","components/Outcome.js","components/Modal.js","components/Start.js","components/App.js","index.js"],"names":["DayInputs","mainButton","React","createRef","handleClick","color","inputValues","props","dates","map","date","parseInt","filter","value","length","kilometers","reduce","x","y","lastWeek","slice","outcomeRate","updateRate","updateColor","updateSetDate","updateOutcome","alert","handleChange","event","find","item","currentTarget","placeholder","updateDates","className","this","key","type","onChange","ref","onFocus","current","onBlur","onClick","Component","Outcome","backToTableButton","backToStartButton","textSet","textGreen","textYellow","textRed","handleBack","handleBackToStart","addLastDate","Math","round","rate","text","Modal","updateIsModal","Start","startButton","lastDate","thisDate","Date","setDate","getDate","i","days","getMonth","handleDate","target","handleAcrClick","isSetDate","isOutcomeReady","name","isModal","App","state","outcomeReady","setState","bool","history","href","render","document","querySelector"],"mappings":"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","file":"static/js/main.9f83c2aa.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst text = `\r\n     A teraz zerknij na zapis swoich biegowych aktywności i wpisz do tabeli kilometry przebiegnięte przez Ciebie w ostatnim dniu, zaznaczonym szarym kolorem i w pozostałe dni w których biegałeś, w poprzedzających go 4 tygodniach. A następnie kliknij przycisk \"Oblicz!\" by poznać swój wskaźnik i dowiedzieć się co oznacza!\r\n`;\r\n\r\nclass DayInputs extends React.Component {\r\n\r\n    mainButton = React.createRef();\r\n\r\n    static propTypes = {\r\n        updateSetDate: PropTypes.func,\r\n        dates: PropTypes.array,\r\n        updateRate: PropTypes.func,\r\n        updateOutcome: PropTypes.func,\r\n        updateColor: PropTypes.func,\r\n        updateDates: PropTypes.func\r\n    }\r\n\r\n    handleClick = () => {\r\n        let color = '';\r\n\r\n        const inputValues = [...this.props.dates].map(date => parseInt(date[1])); //parse kilometers from dates props to number\r\n            \r\n        if(inputValues.filter(value => value > 0).length === 0) {\r\n                alert(\"Ups! Chyba zapomniałeś wpisać wybiegane kilometry!\");\r\n                return\r\n        }\r\n        const kilometers = inputValues\r\n            .filter(value => value > 0)\r\n            .reduce((x, y) => x + y);\r\n        const lastWeek = inputValues\r\n        .slice(0, 7)\r\n        .filter(value => value > 0);\r\n\r\n        if(lastWeek.length === 0) {\r\n            alert(\"Ups! Sprawdź czy poprawnie wpisałeś kilometry wybiegane przez Ciebie w ostatnim tygodniu!\");\r\n            return\r\n        }\r\n\r\n        const lastWeekKilometers = lastWeek.reduce((x, y) => x + y);\r\n\r\n        const outcomeRate = lastWeekKilometers / (kilometers / 4);\r\n\r\n        if(outcomeRate < 1.2) {\r\n            color = 'green';\r\n        } else if (outcomeRate >= 1.2 && outcomeRate < 1.5) {\r\n            color = 'yellow';\r\n        } else {\r\n            color = 'red';\r\n        }\r\n\r\n        this.props.updateRate(outcomeRate);\r\n        this.props.updateColor(color);\r\n        this.props.updateSetDate(false);\r\n        this.props.updateOutcome(true);\r\n    }\r\n\r\n    handleChange = event => {\r\n        const dates = this.props.dates;\r\n        dates.find(item => item[0] === event.currentTarget.placeholder)[1] = event.currentTarget.value;\r\n        this.props.updateDates(dates);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                <div className=\"formArea\">\r\n                <p>\r\n                    {text}\r\n                </p>\r\n                <form>\r\n                    {(this.props.dates).map(date =>\r\n                        // <input key={date} type=\"number\" placeholder={date}></input>\r\n                        <input key={date[0]}\r\n                        type=\"number\" value={date[1]} onChange={this.handleChange} placeholder={date[0]}></input>\r\n                    )}\r\n                </form>\r\n                <button ref={this.mainButton} onFocus={() => {\r\n                    this.mainButton.current.className = \"focus\"\r\n                }} onBlur={() => {\r\n                    this.mainButton.current.className = \"\"\r\n                }} onClick={this.handleClick}>Oblicz!</button>\r\n                </div>\r\n                </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DayInputs;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Outcome extends React.Component {\r\n\r\n    backToTableButton = React.createRef();\r\n    backToStartButton = React.createRef();\r\n\r\n    static propTypes = {\r\n        rate: PropTypes.number,\r\n        color: PropTypes.string,\r\n        updateSetDate: PropTypes.func,\r\n        updateOutcome: PropTypes.func,\r\n        addLastDate: PropTypes.func\r\n    }\r\n\r\n    textSet = () => {\r\n        if(this.props.color === \"green\") {\r\n            return textGreen;\r\n        } else if (this.props.color === \"yellow\") {\r\n            return textYellow;\r\n        } else if (this.props.color === \"red\") {\r\n            return textRed;\r\n        }\r\n    }\r\n\r\n    handleBack = () => {\r\n        // let values = [];\r\n        // let newDates = [];\r\n        this.props.updateSetDate(true);\r\n        this.props.updateOutcome(false);\r\n        // const dates = this.props.dates;\r\n            \r\n        // const localStorageRef = localStorage.getItem(\"values\");\r\n        // if(localStorageRef) {\r\n        //     values = JSON.parse(localStorageRef);\r\n        // }\r\n        // for(let i=0; i < dates.length; i++) {\r\n        //     newDates.push([dates[i][0], values[i]]);\r\n        // }\r\n        // console.log(newDates);\r\n    }\r\n\r\n    handleBackToStart = () => {\r\n        this.props.updateSetDate(false);\r\n        this.props.updateOutcome(false);\r\n        this.props.addLastDate('');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <div className=\"outcome\">\r\n                <div className={`color ${this.props.color}`}>\r\n                    <p>Twój ACR to:</p>\r\n                    <p>{Math.round(this.props.rate * 100) / 100}</p>\r\n                    <p className=\"outcomeText\">{this.textSet()}</p>\r\n                </div>\r\n                <div className=\"desc\">\r\n                    <div className=\"top\">\r\n                        <p>{text}</p>\r\n                        <p className=\"motto\">Do zobaczenia na biegowych trasach!</p>\r\n                    </div>\r\n                    <div className=\"bottom\">\r\n                    <button ref={this.backToTableButton} onFocus={() => {\r\n                    this.backToTableButton.current.className = \"focus\"\r\n                }} onBlur={() => {\r\n                    this.backToTableButton.current.className = \"\"\r\n                }} onClick={this.handleBack}>Wróć do tabelki</button>\r\n                            {/* <button>Wróć do tabelki</button> */}\r\n                    <button ref={this.backToStartButton} onFocus={() => {\r\n                    this.backToStartButton.current.className = \"focus\"\r\n                }} onBlur={() => {\r\n                    this.backToStartButton.current.className = \"\"\r\n                }} onClick={this.handleBackToStart}>Zmień datę ostatniego treningu</button>\r\n                        </div>\r\n                </div>\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst text = `\r\n    Sprawdzaj współczynnik ACR go co kilka tygodni, by kontrolować swoje treningowe obciążenia! Ale pamiętaj, że to tylko sucha liczba, która ma Tobie pomóc w świadomym bieganiu, a nie być jedynym wyznacznikiem! Przede wszystkim obserwuj, nie przeciążaj i myśl - mniej wcale nie oznacza gorzej!\r\n`;\r\n\r\nconst textGreen = `BRAWO! ACR poniżej wartości 1,2 to idealny współczynnik. Ilość Twoich obciążeń treningowych jest optymalna, a ryzyko kontuzji małe! Weź jednak pod uwagę to, że współczynnik ACR nie bierze pod uwagę intensywności treningów, więc jeśli biegasz częściej i krócej, ale bardzo intensywnie, to ryzyko kontuzji i tak rośnie. Dlatego obserwuj swój organizm i świadomie rozkładaj treningowe obciążenia!!!`;\r\n \r\nconst textYellow = `Wartość współczynnika ACR pomiędzy 1,2 a 1,5 oznacza ryzyko kontuzji na umiarkowanym poziomie. Nie jest to wartość optymalna (poniżej 1,2), ale nie oznacza też bardzo dużego ryzyka kontuzji (powyżej 1,5). Obciążanie w ten sposób organizmu w dłuższym okresie może więc zwiększyć ryzyko kontuzji. Dlatego pamiętaj, by starać się dążyć do optymalnego rozłożenia obciążeń treningowych (poniżej 1,2). I pamiętaj, że współczynnik ACR nie bierze pod uwagę intensywności treningów, więc jeśli biegasz częściej i krócej, ale bardzo intensywnie, to ryzyko kontuzji rośnie szybciej. Dlatego obserwuj swój organizm i świadomie rozkładaj treningowe obciążenia!!!`;\r\n\r\nconst textRed = `Wartość współczynnika powyżej 1,5 oznacza bardzo duże ryzyko kontuzji!\r\nPowinieneś ograniczyć ilość przebieganych kilometrów lub rozłożyć je bardziej równomiernie w ciągu tygodnia, tak by zmniejszyć współczynnik do wartości optymalnych - poniżej 1,2. \r\nPamiętaj, że współczynnik ACR nie bierze pod uwagę intensywności treningów, więc jeśli biegasz częściej i krócej, ale bardzo intensywnie, to ryzyko kontuzji rośnie szybciej. Dlatego obserwuj swój organizm i świadomie rozkładaj treningowe obciążenia!!!`;\r\n\r\nexport default Outcome;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst acrText = `\r\n    Czy biegam za dużo? Oczywiście, że nie! Przecież bieganie to całe moje życie! Ja zdecydowanie biegam za mało!!!\r\n    Z pewnością większość z Was podpisze się pod tymi słowami. Ale kiedy w nasze bieganie wkradają się ból i kontuzje, zaczynamy szukać ich przyczyn. I bardzo często te poszukiwania zaczynamy od myśli, czy aby nie przesadziliśmy z objętością treningów i ich równomiernym rozłożeniem.\r\n    Każdy z nas jest inny i bez dokładnej analizy, badań i obserwacji organizmu nie da się w łatwy sposób odpowiedzieć na to pytanie. Ale istnieje prosty, pseudonaukowy wskaźnik, który sprawdza czy nasze obciążenia treningowe i ryzyko kontuzji nie są zbyt duże - to współczynnik ACR.\r\n    Przy jego wyliczaniu porównuje się ilość wybieganych przez Ciebie kilometrów w ostatnim tygodniu, do ilości kilometrów z ostatnich 4 tygodni. Współczynnik ma 3 zakresy wartości, określających  ryzyko kontuzji przy danym obciążeniu, poniżej 1,2, między 1,2 a 1,5 oraz powyżej 1,5. Najbezpieczniejsze są wartości poniżej 1,2. Dokładniejszy opis zakresu w którym plasują Cię Twoje przebiegnięte kilometry poznasz, gdy skorzystasz z tej strony. Kliknij więc przycisk Powrót i podążaj za wskazówkami na ekranie!\r\n    `;\r\n\r\nclass Modal extends React.Component {\r\n\r\n    static propTypes = {\r\n        updateIsModal: PropTypes.func\r\n    }\r\n\r\n    handleClick = () => {\r\n        this.props.updateIsModal(false);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"modal_outer\">\r\n                    <div className=\"modal_inner\">\r\n                    <p>{acrText}</p>\r\n                    <button onClick={this.handleClick}>Powrót</button>\r\n                    </div></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport DayInputs from './DayInputs';\r\nimport Outcome from './Outcome';\r\nimport Modal from './Modal';\r\n\r\nconst text2 = \r\n`\r\nWybierz dzień w którym ostatni raz biegałeś, a następnie kliknij przycisk zaczynamy!\r\n`;\r\n\r\nclass Start extends React.Component {\r\n\r\n    startButton = React.createRef();\r\n\r\n    static propTypes = {\r\n        lastDate: PropTypes.string,\r\n        updateSetDate: PropTypes.func,\r\n        updateDates: PropTypes.func,\r\n        addLastDate: PropTypes.func,\r\n        isSetDate: PropTypes.bool,\r\n        dates: PropTypes.array,\r\n        updateRate: PropTypes.func,\r\n        updateOutcome: PropTypes.func,\r\n        rate: PropTypes.number,\r\n        updateColor: PropTypes.func,\r\n        isOutcomeReady: PropTypes.bool,\r\n        color: PropTypes.string,\r\n        isModal: PropTypes.bool,\r\n        updateIsModal: PropTypes.func\r\n    }\r\n\r\n    handleClick = () => {\r\n        if(!this.props.lastDate) {\r\n            alert(\"Wprowadź datę Twojego ostatniego treningu!\");\r\n            return\r\n        }\r\n        this.props.updateSetDate(true);\r\n        const dates = [];\r\n        // set date of first training day\r\n        const thisDate = new Date(this.props.lastDate);\r\n        dates[0] = new Date(thisDate.setDate(thisDate.getDate()));\r\n        // set rest of days\r\n        for(let i = 1; i < 28; i++) {\r\n            dates[i] = new Date(thisDate.setDate(thisDate.getDate() - 1))\r\n        }\r\n        const days = dates.map(date => (\r\n            [`${date.getDate()}/${date.getMonth() + 1}`, '']\r\n        ))\r\n        this.props.updateDates(days);\r\n    }\r\n\r\n    handleDate = event => {\r\n        this.props.addLastDate(event.target.value);\r\n    }\r\n\r\n    handleAcrClick = () => {\r\n        this.props.updateIsModal(true);\r\n    }\r\n\r\n    render() {\r\n        if(this.props.isSetDate) {\r\n           return <DayInputs dates={this.props.dates} updateRate={this.props.updateRate} updateOutcome={this.props.updateOutcome} updateSetDate={this.props.updateSetDate} rate={this.props.rate} updateColor={this.props.updateColor} updateDates={this.props.updateDates}/>\r\n        } else if (this.props.isOutcomeReady) {\r\n            return <Outcome color={this.props.color} rate={this.props.rate} addLastDate={this.props.addLastDate} updateSetDate={this.props.updateSetDate} updateOutcome={this.props.updateOutcome} dates={this.props.dates} updateDates={this.props.updateDates}/>\r\n        }\r\n        return (\r\n            <div className=\"area\">\r\n                <h1>Współczynnik ACR (Acute to Chronic Ratio)</h1>\r\n                <button className=\"acr\" onClick={this.handleAcrClick}>Dowiedz się czym jest ACR!</button>\r\n                <p>{text2}</p>\r\n                <input type=\"date\" name=\"date\" onChange={this.handleDate}/>\r\n                <button ref={this.startButton} onFocus={() => {\r\n                    this.startButton.current.className = \"focus\"\r\n                }} onBlur={() => {\r\n                    this.startButton.current.className = \"\"\r\n                }} onClick={this.handleClick}>Zaczynamy!</button>\r\n                {this.props.isModal ? <Modal updateIsModal={this.props.updateIsModal}/> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Start;","import React from 'react';\r\nimport Start from './Start';\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        setDate: false,\r\n        outcomeReady: false,\r\n        lastDate: '',\r\n        dates: [],\r\n        rate: 0,\r\n        color: '',\r\n        isModal: false\r\n    }\r\n\r\n    addLastDate = (date) => {\r\n        this.setState({\r\n            lastDate: date\r\n        })\r\n    }\r\n\r\n    updateDates = (dates) => {\r\n        this.setState({\r\n            dates\r\n        })\r\n    }\r\n\r\n    updateSetDate = (bool) => {\r\n        this.setState({\r\n            setDate: bool\r\n        })\r\n    }\r\n\r\n    updateRate = rate => {\r\n        this.setState({\r\n            rate\r\n        })\r\n    }\r\n\r\n    updateOutcome = bool => {\r\n        this.setState({\r\n            outcomeReady: bool\r\n        })\r\n    }\r\n\r\n    updateColor = color => {\r\n        this.setState({\r\n            color\r\n        })\r\n    }\r\n\r\n    updateIsModal = bool => {\r\n        this.setState({\r\n            isModal: bool\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <h2>biegam za dużo?</h2>\r\n            <Start history={this.props.history} addLastDate={this.addLastDate} lastDate={this.state.lastDate} updateDates={this.updateDates} updateSetDate={this.updateSetDate} isSetDate={this.state.setDate} dates={this.state.dates} updateRate={this.updateRate} isOutcomeReady={this.state.outcomeReady} updateOutcome={this.updateOutcome} rate={this.state.rate} updateColor={this.updateColor} color={this.state.color} isModal={this.state.isModal} updateIsModal={this.updateIsModal}/>\r\n            <footer>\r\n                <a href=\"mailto:przemoszadkowski@o2.pl\">&copy;Przemysław Szadkowski</a>\r\n            </footer>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport App from './components/App';\r\nimport './css/style.css';\r\n\r\nrender(<App/>, document.querySelector('#main'));"],"sourceRoot":""}