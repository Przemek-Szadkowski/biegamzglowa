{"version":3,"sources":["components/DayInputs.js","components/Outcome.js","components/Start.js","components/App.js","index.js"],"names":["DayInputs","mainButton","React","createRef","handleClick","color","inputValues","document","querySelectorAll","map","input","parseInt","value","values","dates","props","newDates","i","length","push","updateDates","filter","kilometers","reduce","x","y","lastWeek","slice","outcomeRate","updateRate","updateColor","updateSetDate","updateOutcome","alert","handleChange","event","find","item","currentTarget","placeholder","className","this","date","key","type","onChange","ref","onFocus","current","onBlur","onClick","Component","Outcome","backToTableButton","backToStartButton","textSet","textGreen","textYellow","textRed","handleBack","handleBackToStart","addLastDate","Math","round","rate","text","Start","startButton","lastDate","thisDate","Date","setDate","getDate","days","getMonth","handleDate","target","isSetDate","isOutcomeReady","name","App","state","outcomeReady","setState","bool","history","href","render","querySelector"],"mappings":"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","file":"static/js/main.416f9430.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst text = `\r\n    Porównując ilość wybieganych przez Ciebie kilometrów w ostatnim tygodniu, do ilości kilometrów z ostatnich 4 tygodni, można obliczyć stosunek określany wskaźnikiem ACR. Ma on 3 zakresy wartości, określających  ryzyko kontuzji przy danym obciążeniu, poniżej 1,2, między 1,2 a 1,5 oraz powyżej 1,5. Zerknij na zapis swoich biegowych aktywności i wpisz do tabeli kilometry przebiegnięte przez Ciebie w ostatnim dniu, zaznaczonym szarym kolorem i w pozostałe dni biegowe poprzedzających go 4 tygodni. A następnie kliknij przycisk \"Oblicz!\" by poznać swój wskaźnik i dowiedzieć się co oznacza!\r\n`;\r\n\r\nclass DayInputs extends React.Component {\r\n\r\n    mainButton = React.createRef();\r\n\r\n    static propTypes = {\r\n        updateSetDate: PropTypes.func,\r\n        dates: PropTypes.array,\r\n        updateRate: PropTypes.func,\r\n        updateOutcome: PropTypes.func,\r\n        updateColor: PropTypes.func,\r\n        updateDates: PropTypes.func\r\n    }\r\n\r\n    handleClick = () => {\r\n        let color = '';\r\n        const inputValues = [...document.querySelectorAll('input')]\r\n            .map(input => parseInt(input.value));\r\n\r\n        const values = [...document.querySelectorAll('input')].map(value => value.value);\r\n        // blok zapisu do localStorage\r\n        // localStorage.setItem(\"values\", JSON.stringify(values));\r\n\r\n        // blok do kontroli inputów\r\n        const dates = this.props.dates;\r\n        let newDates = [];\r\n        for(let i=0; i < dates.length; i++) {\r\n            newDates.push([dates[i][0], values[i]]);\r\n        }\r\n        this.props.updateDates(newDates);\r\n        // koniec bloku\r\n            \r\n        if(inputValues.filter(value => value > 0).length === 0) {\r\n                alert(\"Ups! Chyba zapomniałeś wpisać wybiegane kilometry!\");\r\n                return\r\n        }\r\n        const kilometers = inputValues\r\n            .filter(value => value > 0)\r\n            .reduce((x, y) => x + y);\r\n        const lastWeek = inputValues\r\n        .slice(0, 7)\r\n        .filter(value => value > 0);\r\n\r\n        if(lastWeek.length === 0) {\r\n            alert(\"Ups! Sprawdź czy poprawnie wpisałeś kilometry wybiegane przez Ciebie w ostatnim tygodniu!\");\r\n            return\r\n        }\r\n\r\n        const lastWeekKilometers = lastWeek.reduce((x, y) => x + y);\r\n\r\n        const outcomeRate = lastWeekKilometers / (kilometers / 4);\r\n\r\n        if(outcomeRate < 1.2) {\r\n            color = 'green';\r\n        } else if (outcomeRate >= 1.2 && outcomeRate < 1.5) {\r\n            color = 'yellow';\r\n        } else {\r\n            color = 'red';\r\n        }\r\n\r\n        this.props.updateRate(outcomeRate);\r\n        this.props.updateColor(color);\r\n        this.props.updateSetDate(false);\r\n        this.props.updateOutcome(true);\r\n    }\r\n\r\n    handleChange = event => {\r\n        const dates = this.props.dates;\r\n        dates.find(item => item[0] === event.currentTarget.placeholder)[1] = event.currentTarget.value;\r\n        this.props.updateDates(dates);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                <div className=\"formArea\">\r\n                <p>\r\n                    {text}\r\n                </p>\r\n                <form>\r\n                    {(this.props.dates).map(date =>\r\n                        // <input key={date} type=\"number\" placeholder={date}></input>\r\n                        <input key={date[0]} type=\"number\" value={date[1]} onChange={this.handleChange} placeholder={date[0]}></input>\r\n                    )}\r\n                </form>\r\n                <button ref={this.mainButton} onFocus={() => {\r\n                    this.mainButton.current.className = \"focus\"\r\n                }} onBlur={() => {\r\n                    this.mainButton.current.className = \"\"\r\n                }} onClick={this.handleClick}>Oblicz!</button>\r\n                </div>\r\n                </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DayInputs;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Outcome extends React.Component {\r\n\r\n    backToTableButton = React.createRef();\r\n    backToStartButton = React.createRef();\r\n\r\n    static propTypes = {\r\n        rate: PropTypes.number,\r\n        color: PropTypes.string,\r\n        updateSetDate: PropTypes.func,\r\n        updateOutcome: PropTypes.func,\r\n        addLastDate: PropTypes.func\r\n    }\r\n\r\n    textSet = () => {\r\n        if(this.props.color === \"green\") {\r\n            return textGreen;\r\n        } else if (this.props.color === \"yellow\") {\r\n            return textYellow;\r\n        } else if (this.props.color === \"red\") {\r\n            return textRed;\r\n        }\r\n    }\r\n\r\n    handleBack = () => {\r\n        // let values = [];\r\n        // let newDates = [];\r\n        this.props.updateSetDate(true);\r\n        this.props.updateOutcome(false);\r\n        // const dates = this.props.dates;\r\n            \r\n        // const localStorageRef = localStorage.getItem(\"values\");\r\n        // if(localStorageRef) {\r\n        //     values = JSON.parse(localStorageRef);\r\n        // }\r\n        // for(let i=0; i < dates.length; i++) {\r\n        //     newDates.push([dates[i][0], values[i]]);\r\n        // }\r\n        // console.log(newDates);\r\n    }\r\n\r\n    handleBackToStart = () => {\r\n        this.props.updateSetDate(false);\r\n        this.props.updateOutcome(false);\r\n        this.props.addLastDate('');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <div className=\"outcome\">\r\n                <div className={`color ${this.props.color}`}>\r\n                    <p>Twój ACR to:</p>\r\n                    <p>{Math.round(this.props.rate * 100) / 100}</p>\r\n                    <p className=\"outcomeText\">{this.textSet()}</p>\r\n                </div>\r\n                <div className=\"desc\">\r\n                    <div className=\"top\">\r\n                        <p>{text}</p>\r\n                        <p className=\"motto\">Do zobaczenia na biegowych trasach!</p>\r\n                    </div>\r\n                    <div className=\"bottom\">\r\n                    <button ref={this.backToTableButton} onFocus={() => {\r\n                    this.backToTableButton.current.className = \"focus\"\r\n                }} onBlur={() => {\r\n                    this.backToTableButton.current.className = \"\"\r\n                }} onClick={this.handleBack}>Wróć do tabelki</button>\r\n                            {/* <button>Wróć do tabelki</button> */}\r\n                    <button ref={this.backToStartButton} onFocus={() => {\r\n                    this.backToStartButton.current.className = \"focus\"\r\n                }} onBlur={() => {\r\n                    this.backToStartButton.current.className = \"\"\r\n                }} onClick={this.handleBackToStart}>Zmień datę ostatniego treningu</button>\r\n                        </div>\r\n                </div>\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst text = `\r\n    Sprawdzaj współczynnik ACR go co kilka tygodni, by kontrolować swoje treningowe obciążenia! Ale pamiętaj, że to tylko sucha liczba, która ma Tobie pomóc w świadomym bieganiu, a nie być jedynym wyznacznikiem! Przede wszystkim obserwuj, nie przeciążaj i myśl - mniej wcale nie oznacza gorzej!\r\n`;\r\n\r\nconst textGreen = `BRAWO! ACR poniżej wartości 1,2 to idealny współczynnik. Ilość Twoich obciążeń treningowych jest optymalna, a ryzyko kontuzji małe! Weź jednak pod uwagę to, że współczynnik ACR nie bierze pod uwagę intensywności treningów, więc jeśli biegasz często, ale bardzo intensywnie, to ryzyko kontuzji i tak rośnie. Dlatego obserwuj swój organizm i świadomie rozkładaj treningowe obciążenia!!!`;\r\n \r\nconst textYellow = `Wartość współczynnika ACR pomiędzy 1,2 a 1,5 oznacza ryzyko kontuzji na umiarkowanym poziomie. Nie jest to wartość optymalna (poniżej 1,2), ale nie oznacza też bardzo dużego ryzyka kontuzji (powyżej 1,5). Obciążanie w ten sposób organizmu w dłuższym okresie może więc zwiększyć ryzyko kontuzji. Dlatego pamiętaj, by starać się dążyć do optymalnego rozłożenia obciążeń treningowych (poniżej 1,2). I pamiętaj, że współczynnik ACR nie bierze pod uwagę intensywności treningów, więc jeśli biegasz często, ale bardzo intensywnie, to ryzyko kontuzji rośnie szybciej. Dlatego obserwuj swój organizm i świadomie rozkładaj treningowe obciążenia!!!`;\r\n\r\nconst textRed = `Wartość współczynnika powyżej 1,5 oznacza bardzo duże ryzyko kontuzji!\r\nPowinieneś ograniczyć ilość przebieganych kilometrów lub rozłożyć je bardziej równomiernie w ciągu tygodnia, tak by zmniejszyć współczynnik do wartości optymalnych - poniżej 1,2. \r\nPamiętaj, że współczynnik ACR nie bierze pod uwagę intensywności treningów, więc jeśli biegasz często, ale bardzo intensywnie, to ryzyko kontuzji rośnie szybciej. Dlatego obserwuj swój organizm i świadomie rozkładaj treningowe obciążenia!!!`;\r\n\r\nexport default Outcome;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport DayInputs from './DayInputs';\r\nimport Outcome from './Outcome';\r\n\r\nconst text = \"Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quidem maxime cum alias aperiam! Accusantium perferendis quidem, laudantium sit porro fugiat asperiores maiores reiciendis, autem ea est odit magnam ut! Vel corrupti quod provident qui labore beatae cupiditate! Nemo eaque laboriosam porro laborum facilis, earum quas iusto nihil saepe quibusdam nostrum officia quasi quia eos. Nostrum delectus aspernatur accusamus eius accusantium, quae totam veritatis fugiat itaque quisquam nihil consequatur illum dicta harum alias dolore libero ducimus tenetur. Sint suscipit accusamus ratione eum rerum, cupiditate veritatis. Eum sint, nemo maxime beatae consequuntur possimus.\";\r\n\r\nconst text2 = \r\n`\r\nCzy biegam za dużo? Oczywiście, że nie! Przecież bieganie to całe moje życie! Ja zdecydowanie biegam za mało!!!\r\nZ pewnością większość z Was podpisze się pod tymi słowami. Ale kiedy w nasze bieganie wkradają się ból i kontuzje, zaczynamy szukać ich przyczyn. I bardzo często te poszukiwania zaczynamy od myśli, czy aby nie przesadziliśmy z objętością treningów i ich równomiernym rozłożeniem.\r\nKażdy z nas jest inny i bez dokładnej analizy, badań i obserwacji organizmu nie da się w łatwy sposób odpowiedzieć na to pytanie. Ale istnieje prosty, pseudonaukowy wskaźnik, który sprawdza czy nasze obciążenia treningowe i ryzyko kontuzji nie są zbyt duże - współczynnik ACR.\r\nZa chwilę wyjaśnię jak go interpretować, ale aby go obliczyć, wybierz dzień w którym ostatni raz biegałeś (to ważne, by obliczyć wskaźnik dla Twojego obecnego obciążenia) i kliknij przycisk \"Zaczynamy!\"\r\n`\r\n\r\nclass Start extends React.Component {\r\n\r\n    startButton = React.createRef();\r\n\r\n    static propTypes = {\r\n        lastDate: PropTypes.string,\r\n        updateSetDate: PropTypes.func,\r\n        updateDates: PropTypes.func,\r\n        addLastDate: PropTypes.func,\r\n        isSetDate: PropTypes.bool,\r\n        dates: PropTypes.array,\r\n        updateRate: PropTypes.func,\r\n        updateOutcome: PropTypes.func,\r\n        rate: PropTypes.number,\r\n        updateColor: PropTypes.func,\r\n        isOutcomeReady: PropTypes.bool,\r\n        color: PropTypes.string\r\n    }\r\n\r\n    handleClick = () => {\r\n        if(!this.props.lastDate) {\r\n            alert(\"Wprowadź datę Twojego ostatniego treningu!\");\r\n            return\r\n        }\r\n        this.props.updateSetDate(true);\r\n        const dates = [];\r\n        // set date of first training day\r\n        const thisDate = new Date(this.props.lastDate);\r\n        dates[0] = new Date(thisDate.setDate(thisDate.getDate()));\r\n        // set rest of days\r\n        for(let i = 1; i < 28; i++) {\r\n            dates[i] = new Date(thisDate.setDate(thisDate.getDate() - 1))\r\n        }\r\n        const days = dates.map(date => (\r\n            [`${date.getDate()}/${date.getMonth() + 1}`, '']\r\n        ))\r\n        this.props.updateDates(days);\r\n    }\r\n\r\n    handleDate = event => {\r\n        this.props.addLastDate(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        if(this.props.isSetDate) {\r\n           return <DayInputs dates={this.props.dates} updateRate={this.props.updateRate} updateOutcome={this.props.updateOutcome} updateSetDate={this.props.updateSetDate} rate={this.props.rate} updateColor={this.props.updateColor} updateDates={this.props.updateDates}/>\r\n        } else if (this.props.isOutcomeReady) {\r\n            return <Outcome color={this.props.color} rate={this.props.rate} addLastDate={this.props.addLastDate} updateSetDate={this.props.updateSetDate} updateOutcome={this.props.updateOutcome} dates={this.props.dates} updateDates={this.props.updateDates}/>\r\n        }\r\n        return (\r\n            <div className=\"area\">\r\n                <h1>Współczynnik ACR (Acute to Chronic Ratio)</h1>\r\n                <p>{text2}</p>\r\n                <input type=\"date\" name=\"date\" onChange={this.handleDate}/>\r\n                <button ref={this.startButton} onFocus={() => {\r\n                    this.startButton.current.className = \"focus\"\r\n                }} onBlur={() => {\r\n                    this.startButton.current.className = \"\"\r\n                }} onClick={this.handleClick}>Zaczynamy!</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Start;","import React from 'react';\r\nimport Start from './Start';\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        setDate: false,\r\n        outcomeReady: false,\r\n        lastDate: '',\r\n        dates: [],\r\n        rate: 0,\r\n        color: '',\r\n    }\r\n\r\n    addLastDate = (date) => {\r\n        this.setState({\r\n            lastDate: date\r\n        })\r\n    }\r\n\r\n    updateDates = (dates) => {\r\n        this.setState({\r\n            dates\r\n        })\r\n    }\r\n\r\n    updateSetDate = (bool) => {\r\n        this.setState({\r\n            setDate: bool\r\n        })\r\n    }\r\n\r\n    updateRate = rate => {\r\n        this.setState({\r\n            rate\r\n        })\r\n    }\r\n\r\n    updateOutcome = bool => {\r\n        this.setState({\r\n            outcomeReady: bool\r\n        })\r\n    }\r\n\r\n    updateColor = color => {\r\n        this.setState({\r\n            color\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <h2>biegam za dużo?</h2>\r\n            <Start history={this.props.history} addLastDate={this.addLastDate} lastDate={this.state.lastDate} updateDates={this.updateDates} updateSetDate={this.updateSetDate} isSetDate={this.state.setDate} dates={this.state.dates} updateRate={this.updateRate} isOutcomeReady={this.state.outcomeReady} updateOutcome={this.updateOutcome} rate={this.state.rate} updateColor={this.updateColor} color={this.state.color}/>\r\n            <footer>\r\n                <a href=\"mailto:przemoszadkowski@o2.pl\">&copy;Przemysław Szadkowski</a>\r\n            </footer>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport App from './components/App';\r\nimport './css/style.css';\r\n\r\nrender(<App/>, document.querySelector('#main'));"],"sourceRoot":""}